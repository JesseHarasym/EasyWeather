{"version":3,"sources":["Authorization/State/Others/actions.js","Authorization/State/Others/setAuthToken.js","Authorization/Routes/routeDispatch.js","Authorization/State/Reducers/authReducer.js","Authorization/State/Reducers/errorReducer.js","Authorization/State/Reducers/rootReducer.js","Authorization/State/Others/store.js","API/API_Keys.js","Components/Others/DailyForecast.js","Components/Main/NotLoggedIn/Navigation.js","Components/Main/NotLoggedIn/Home.js","Components/Main/NotLoggedIn/Register.js","Components/Main/NotLoggedIn/Login.js","Components/Others/PrivateRoute.js","Components/Main/LoggedIn/Navigation.js","Components/Main/LoggedIn/Home.js","Components/Main/LoggedIn/Settings.js","App.js","reportWebVitals.js","index.js"],"names":["SET_CURRENT_USER","SET_USER_SETTINGS","GET_ERRORS","setAuthToken","token","axios","defaults","headers","common","logoutUser","dispatch","localStorage","removeItem","setCurrentUser","decoded","type","payload","setUserSettings","user","setError","err","response","data","isEmpty","require","initialState","isAuthenticated","combineReducers","auth","state","action","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","API","moment","center","alignItems","DailyForecast","units","tempUnit","date","Date","time","dt","setTime","currentDate","format","currentDay","currentTemp","Math","round","main","temp","weatherDescription","weather","description","className","style","Navigation","to","React","Component","Home","props","dailyForecast","city","country","submittedCity","submittedUnits","invalidCity","handleChangeCity","bind","handleChangeUnits","handleSubmit","navigator","geolocation","watchPosition","position","weatherURL","coords","latitude","longitude","fetch","then","res","json","dailyData","list","filter","reading","dt_txt","includes","setState","name","console","log","this","event","target","value","preventDefault","searchForCityData","charAt","toUpperCase","slice","onSubmit","onChange","placeholder","capatlizeCity","map","key","display","justifyContent","Register","e","id","newUser","email","password","password2","temperature","registerUser","history","push","nextProps","marginTop","marginLeft","class","noValidate","error","connect","userData","post","catch","Login","loginUser","emailnotfound","passwordincorrect","setItem","jwt_decode","component","rest","render","onLogoutClick","userId","_id","split","onClick","Settings","onDelete","User","deleteUser","editUser","put","App","exact","path","HomeNotLoggedIn","jwtToken","currentTime","now","exp","window","location","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.573179a9.chunk.js","sourcesContent":["//define different actions for state\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\nexport const SET_USER_SETTINGS = \"SET_USER_SETTINGS\";\r\nexport const GET_ERRORS = \"GET_ERRORS\";\r\n","import axios from \"axios\";\r\n\r\n//this is used to set and delete axios's authorization header dependent on if a user is logged in\r\nconst setAuthToken = (token) => {\r\n  if (token) {\r\n    //apply token to request if logged in\r\n    axios.defaults.headers.common[\"Authorization\"] = token;\r\n  } else {\r\n    //delete tokens authorization header if not logged in\r\n    delete axios.defaults.headers.common[\"Authorization\"];\r\n  }\r\n};\r\n\r\nexport default setAuthToken;\r\n","import axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\n//import current actions defined in state\r\nimport {\r\n  GET_ERRORS,\r\n  SET_CURRENT_USER,\r\n  SET_USER_SETTINGS,\r\n} from \"../State/Others/actions\";\r\nimport setAuthToken from \"../State/Others/setAuthToken\"; //so we can set token header as needed\r\n\r\n//registration route that posts through axios to our backend to register out user\r\nexport const registerUser = (userData, history) => (dispatch) => {\r\n  axios\r\n    .post(\"/users/register\", userData)\r\n    //after success, push user to login page (made push to login so it makes sense when email confirmation is set up)\r\n    .then((res) => history.push(\"/login\"))\r\n    .catch((err) => dispatch(setError(err))); //if error caught, then dispatch error\r\n};\r\n\r\n//login route that posts through axios to our backend to login our user\r\nexport const loginUser = (userData) => (dispatch) => {\r\n  axios\r\n    .post(\"/users/login\", userData)\r\n    .then((res) => {\r\n      //set recieved data from backend as token\r\n      const { token } = res.data;\r\n      //set token to local storage\r\n      localStorage.setItem(\"jwtToken\", token);\r\n      //send token to axios authorization header\r\n      setAuthToken(token);\r\n      //decode our tokens data\r\n      const decoded = jwt_decode(token);\r\n      //dispatch our decoded data to set our current user\r\n      dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch((err) => dispatch(setError(err))); //if error caught, then dispatch error\r\n};\r\n\r\n//edituser route that puts through axios to our backend to allow user to change their settings\r\nexport const editUser = (userData, history) => (dispatch) => {\r\n  axios\r\n    .put(\"/users/edituser\", userData)\r\n    .then((res) => {\r\n      dispatch(setUserSettings(res.data.user)); //dispatch response data from backend to be set as new user data\r\n      history.push(\"/home\");\r\n    })\r\n    .catch((err) => dispatch(setError(err))); //if error caught, then dispatch error\r\n};\r\n\r\n//deleteUser route that posts through axios to our backend to allow user to delete their accounts\r\nexport const deleteUser = (userData) => (dispatch) => {\r\n  axios\r\n    .post(\"/users/deleteuser\", userData)\r\n    .then((res) => {\r\n      dispatch(logoutUser());\r\n    })\r\n    .catch((err) => dispatch(setError(err))); //if error caught, then dispatch error\r\n};\r\n\r\n//logout defined to allow logout to be used in navbar\r\nexport const logoutUser = () => (dispatch) => {\r\n  localStorage.removeItem(\"jwtToken\");\r\n  setAuthToken(false);\r\n  dispatch(setCurrentUser({}));\r\n};\r\n\r\n//setCurrentUser defined to dispatch data to state with the correct type\r\nexport const setCurrentUser = (decoded) => {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded,\r\n  };\r\n};\r\n\r\n//setUserSettings to dispatch data to state with correct type (difference is this does not set authorization, as users already logged in)\r\nexport const setUserSettings = (user) => {\r\n  return {\r\n    type: SET_USER_SETTINGS,\r\n    payload: user,\r\n  };\r\n};\r\n\r\n//setError used to dispatch any errors caught to state\r\nexport const setError = (err) => {\r\n  return {\r\n    type: GET_ERRORS,\r\n    payload: err.response.data,\r\n  };\r\n};\r\n","//import our current actions to be used for setting state\r\nimport { SET_CURRENT_USER, SET_USER_SETTINGS } from \"../Others/actions\";\r\n\r\nconst isEmpty = require(\"is-empty\");\r\n\r\n//set initial state object for authorization to be changed dependending on user actions\r\nconst initialState = {\r\n  isAuthenticated: false,\r\n  user: {},\r\n};\r\n\r\nexport default function authReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_CURRENT_USER:\r\n      return {\r\n        ...state,\r\n        //set authentication and user data according to payload when logging in\r\n        isAuthenticated: !isEmpty(action.payload),\r\n        user: action.payload,\r\n      };\r\n    case SET_USER_SETTINGS:\r\n      return {\r\n        ...state,\r\n        user: action.payload, //send user data according to payload when user edits settings\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { GET_ERRORS } from \"../Others/actions\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function errorReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./authReducer\";\r\nimport errorReducer from \"./errorReducer\";\r\n\r\n//combine reducers so more easily scalable as reducers are added to application\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  errors: errorReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../Reducers/rootReducer\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\n//store to send state to our components\r\nconst store = createStore(\r\n  //pass rootReducer which is a combination of authReducer and errorReducer\r\n  rootReducer,\r\n  initialState, //define initial state to our store\r\n  //we apply middleware so that we can preform asynchronous actions\r\n  compose(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","//API key used to access data in OpenWeatherMap\r\nconst API = \"64ac0950f15df1a9f2d16c0d110a9a3c\";\r\n\r\nexport default API;\r\n","import React from \"react\";\r\nlet moment = require(\"moment\");\r\n\r\n//this is a basic function so that it can be mapped out on our home page\r\n//this function creates all the weather cards to display our 5 day forecast\r\nlet DailyForecast = ({ data, tempUnit }) => {\r\n  let units = tempUnit; //temperature unit to be shown to user\r\n  //get date and time, so we can display it properely in our weather cards\r\n  let date = new Date();\r\n  let time = data.dt * 1000;\r\n  date.setTime(time);\r\n\r\n  //set current date and day as needed for our cards\r\n  let currentDate = moment(date).format(\"MMM D, YYYY\");\r\n  let currentDay = moment(currentDate).format(\"dddd\");\r\n  //set current temp rounded to show no decimals\r\n  let currentTemp = Math.round(data.main.temp);\r\n  //set weather description as needed for our cards\r\n  let weatherDescription = data.weather[0].description;\r\n\r\n  return (\r\n    <div className=\"col-sm-2\">\r\n      <div className=\"card pt-2\" style={center}>\r\n        <h4 className=\"card-title p-3\">{currentDay}</h4>\r\n        <p>{currentDate}</p>\r\n        {/* basic turnery to show temperature according to units provided */}\r\n        <h2 className=\"p-2\">\r\n          {units === \"metric\"\r\n            ? currentTemp + \" °C\"\r\n            : units === \"imperial\"\r\n            ? currentTemp + \" °F\"\r\n            : currentTemp + \" K\"}\r\n        </h2>\r\n        <p className=\"p-2\">{weatherDescription}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst center = {\r\n  alignItems: \"center\",\r\n};\r\n\r\nexport default DailyForecast;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//this is the nagivation bar used for users who are not logged in\r\nclass Navigation extends React.Component {\r\n  //navigation has three links: Home, Login and Register\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar bg-dark\">\r\n        <Link to=\"/\" className=\"btn btn-dark ml-4\">\r\n          Home\r\n        </Link>\r\n        <div className=\"float-right\">\r\n          <Link to=\"/login\" className=\"btn btn-dark mr-5\">\r\n            Log In\r\n          </Link>\r\n          <Link to=\"/register\" className=\"btn btn-dark mr-4\">\r\n            Register\r\n          </Link>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\n\r\nimport API from \"../../../API/API_Keys\";\r\nimport DailyForecast from \"../../Others/DailyForecast\";\r\nimport Navigation from \"./Navigation\";\r\n\r\n//this is the home page showed to users who aren't logged in\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      dailyForecast: [],\r\n      city: \"\",\r\n      country: \"\",\r\n      units: \"metric\",\r\n      submittedCity: \"\",\r\n      submittedUnits: \"metric\",\r\n      invalidCity: false,\r\n    };\r\n    //bind changes to state\r\n    this.handleChangeCity = this.handleChangeCity.bind(this);\r\n    this.handleChangeUnits = this.handleChangeUnits.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //on component mount, ask user to share their location, if successful then show weather data according to location\r\n    let success = (position) => {\r\n      const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?lat=${position.coords.latitude}&lon=${position.coords.longitude}&units=${this.state.units}&appid=${API}`;\r\n      fetch(weatherURL)\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          //filter data to readable format for state\r\n          let dailyData = data.list.filter((reading) =>\r\n            reading.dt_txt.includes(\"21:00:00\")\r\n          );\r\n          //set new state to filtered data recieved from api call\r\n          this.setState({\r\n            data: data,\r\n            dailyForecast: dailyData,\r\n            country: data.city.country,\r\n            submittedCity: data.city.name,\r\n          });\r\n        });\r\n    };\r\n    //if user does not share data, then console log error\r\n    let error = () => {\r\n      console.log(\"We are not able to determine your location..\");\r\n    };\r\n    //used to wait for success or error and respond appropriately\r\n    navigator.geolocation.watchPosition(success, error);\r\n  }\r\n\r\n  //fetch city weather data from API when user searches city or changes temperature units\r\n  searchForCityData() {\r\n    const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?q=${this.state.city}&units=${this.state.units}&appid=${API}`;\r\n    fetch(weatherURL)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        try {\r\n          //try filtering data to determine if the city is a valid city\r\n          let dailyData = data.list.filter((reading) =>\r\n            reading.dt_txt.includes(\"21:00:00\")\r\n          );\r\n          //set new state to filtered data if its a valid city\r\n          this.setState({\r\n            data: data,\r\n            dailyForecast: dailyData,\r\n            country: data.city.country,\r\n            invalidCity: false,\r\n          });\r\n        } catch {\r\n          //if data cannot be filtered, then it's invalid city, set state to reflect this\r\n          this.setState({\r\n            invalidCity: true,\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  //handle city changes\r\n  handleChangeCity(event) {\r\n    this.setState({\r\n      city: event.target.value,\r\n    });\r\n  }\r\n\r\n  //handle unit changes\r\n  handleChangeUnits(event) {\r\n    this.setState({ units: event.target.value });\r\n  }\r\n\r\n  //handle when user submits\r\n  handleSubmit(event) {\r\n    event.preventDefault(); //stop default page redirect\r\n    //change state to new data from user\r\n    this.setState(\r\n      {\r\n        city: this.state.city,\r\n        submittedCity: this.state.city,\r\n        units: this.state.units,\r\n        submittedUnits: this.state.units,\r\n      },\r\n      //fetch from api for new weather data\r\n      () => {\r\n        this.searchForCityData();\r\n      }\r\n    );\r\n  }\r\n\r\n  //capatlize first letter of city name if user inputs as small characters\r\n  //want to change to handle first letter of each word for cities with names that are more then one word\r\n  capatlizeCity(city) {\r\n    return city.charAt(0).toUpperCase() + city.slice(1);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* navigation bar for users who are not logged in */}\r\n        <Navigation />\r\n        <div className=\"pb-5\">\r\n          <br />\r\n          <br />\r\n          <h1 style={center} className=\"p-5 text-light\">\r\n            EasyWeather\r\n          </h1>\r\n          <br />\r\n          <div style={center}>\r\n            {/* base form for handling user submits */}\r\n            <form onSubmit={this.handleSubmit}>\r\n              <input\r\n                value={this.state.city}\r\n                onChange={this.handleChangeCity}\r\n                type=\"text\"\r\n                className=\"p-2 m-4 rounded border-0\"\r\n                placeholder=\"Your city..\"\r\n              />\r\n              <select\r\n                value={this.state.units}\r\n                onChange={this.handleChangeUnits}\r\n                className=\"p-2 m-4 rounded border-0\"\r\n              >\r\n                <option value=\"metric\">Celcius</option>\r\n                <option value=\"imperial\">Fahrenheit</option>\r\n                <option value=\"kelvin\">Kelvin</option>\r\n              </select>\r\n              <input\r\n                className=\"btn btn-info ml-5 pl-3 pr-3\"\r\n                type=\"submit\"\r\n                value=\"Search\"\r\n              />\r\n              {/* if city is invalid, then show a message stating so */}\r\n              <p className=\"text-light\" style={center}>\r\n                {this.state.invalidCity === true\r\n                  ? \"Invalid city search.. please try again.\"\r\n                  : \"\"}\r\n              </p>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        {/* only show 5 day forecast text if city is valid */}\r\n        <div className=\"pt-2\">\r\n          <h2 style={center} className=\"text-light pb-4 pt-2\">\r\n            {this.state.submittedCity !== \"\" && this.state.invalidCity === false\r\n              ? \"5 Day Forecast\"\r\n              : \"\"}\r\n          </h2>\r\n          <h5\r\n            className=\"text-light pb-5\"\r\n            style={({ textTransform: \"capitalize\" }, center)}\r\n          >\r\n            {/* only show city information if city is valid and capatlize first letter of city */}\r\n            {this.state.invalidCity === false\r\n              ? this.capatlizeCity(this.state.submittedCity) +\r\n                \" \" +\r\n                this.state.country\r\n              : \"\"}\r\n          </h5>\r\n          <h5 className=\"justify-content-center row\">\r\n            {/* if city is valid then use DailyForecast component to map out the weather cards*/}\r\n            {this.state.invalidCity === false\r\n              ? this.state.dailyForecast.map((data, key) => (\r\n                  <DailyForecast\r\n                    key={key}\r\n                    data={data}\r\n                    tempUnit={this.state.submittedUnits}\r\n                  />\r\n                ))\r\n              : \"\"}\r\n          </h5>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//basic styling for centering various components\r\nconst center = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n};\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { registerUser } from \"../../../Authorization/Routes/routeDispatch\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      city: \"\",\r\n      temperature: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  //if user has already been authenticated/has token in header, redirect directly to logged in home page\r\n  componentDidMount() {\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/home\");\r\n    }\r\n  }\r\n\r\n  //to recieve errors from server side validator if input fails validation test\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  //set state on input changed by user\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault(); //stop default page redirect\r\n    //create newUser object that contains the users registration data\r\n    const newUser = {\r\n      name: this.state.name,\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      password2: this.state.password2,\r\n      city: this.state.city,\r\n      temperature: this.state.temperature,\r\n    };\r\n    //send registration data to route dispatcher to be sent to backend and processed\r\n    this.props.registerUser(newUser, this.props.history);\r\n  };\r\n\r\n  render() {\r\n    //constant to display error variables passed to the state to be displayed from backend validation\r\n    const { errors } = this.state;\r\n    return (\r\n      <div>\r\n        <Navigation />\r\n        <div className=\"col d-flex justify-content-center\">\r\n          <div\r\n            className=\"card p-5 border-secondary\"\r\n            style={{ marginTop: \"10%\" }}\r\n          >\r\n            <div className=\"p-3\">\r\n              <h3 className=\"pb-4\">Register for EasyWeather</h3>\r\n              <div style={{ marginLeft: \"13%\" }}>\r\n                <h5>\r\n                  Already have an account?\r\n                  <br />\r\n                </h5>\r\n                {/* link to move to login page */}\r\n                <Link\r\n                  style={{ marginLeft: \"18%\" }}\r\n                  to=\"/login\"\r\n                  class=\"linkStyle\"\r\n                >\r\n                  Click here to Log in\r\n                </Link>\r\n              </div>\r\n            </div>\r\n            {/* base form for handling user submits */}\r\n            <form noValidate onSubmit={this.onSubmit}>\r\n              <div>\r\n                <input\r\n                  placeholder=\"Name\"\r\n                  onChange={this.onChange}\r\n                  value={this.state.name}\r\n                  error={errors.name}\r\n                  id=\"name\"\r\n                  type=\"name\"\r\n                />\r\n                <br />\r\n                {/* spans are used to display validation errors */}\r\n                <span>{errors.name}</span>\r\n              </div>\r\n              <div>\r\n                <input\r\n                  placeholder=\"Email\"\r\n                  onChange={this.onChange}\r\n                  value={this.state.email}\r\n                  error={errors.email}\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                />\r\n                <br />\r\n                <span>{errors.email}</span>\r\n              </div>\r\n              <div>\r\n                <input\r\n                  placeholder=\"Password\"\r\n                  onChange={this.onChange}\r\n                  value={this.state.password}\r\n                  error={errors.password}\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                />\r\n                <br />\r\n                <span>{errors.password}</span>\r\n              </div>\r\n              <div>\r\n                <input\r\n                  placeholder=\"Re-enter Password\"\r\n                  onChange={this.onChange}\r\n                  value={this.state.password2}\r\n                  error={errors.password2}\r\n                  id=\"password2\"\r\n                  type=\"password\"\r\n                />\r\n                <br />\r\n                <span>{errors.password2}</span>\r\n              </div>\r\n              <div>\r\n                <input\r\n                  placeholder=\"Preferred City\"\r\n                  onChange={this.onChange}\r\n                  value={this.state.city}\r\n                  error={errors.city}\r\n                  id=\"city\"\r\n                  type=\"city\"\r\n                />\r\n                <br />\r\n                <span>{errors.city}</span>\r\n              </div>\r\n              <div>\r\n                <select\r\n                  onChange={this.onChange}\r\n                  value={this.state.temperature}\r\n                  id=\"temperature\"\r\n                  className=\"textInput\"\r\n                >\r\n                  <option value=\"\">Preferred Temperature</option>\r\n                  <option value=\"metric\">Celcius</option>\r\n                  <option value=\"imperial\">Fahrenheit</option>\r\n                  <option value=\"kelvin\">Kelvin</option>\r\n                </select>\r\n                <br />\r\n                <span>{errors.temperature}</span>\r\n              </div>\r\n              <div>\r\n                <button\r\n                  className=\"btn btn-secondary mt-4\"\r\n                  type=\"submit\"\r\n                  style={{ marginLeft: \"41%\" }}\r\n                >\r\n                  Sign up\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//define types with prop-types package, since we can't define in our constructor\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n//map redux state to props to access it in our component\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n  errors: state.errors,\r\n});\r\n\r\n//connect our component to our redux store and export it\r\nexport default connect(mapStateToProps, { registerUser })(Register);\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { loginUser } from \"../../../Authorization/Routes/routeDispatch\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  //if user has already been authenticated/has token in header, redirect directly to logged in home page\r\n  componentDidMount() {\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/home\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    //if user logs in successfully then push to logged in home page\r\n    if (nextProps.auth.isAuthenticated) {\r\n      this.props.history.push(\"/home\");\r\n    }\r\n    //to recieve errors from server side validator if input fails validation test\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  //set state on input changed by user\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault(); //stop default page redirect\r\n    //create user object that contains the users login data\r\n    const userData = {\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n    };\r\n    //send login data to route dispatcher to be sent to backend and processed\r\n    this.props.loginUser(userData);\r\n  };\r\n\r\n  render() {\r\n    //constant to display error variables passed to the state to be displayed from backend validation\r\n    const { errors } = this.state;\r\n    return (\r\n      <div>\r\n        <Navigation />\r\n        <div className=\"col d-flex justify-content-center\">\r\n          <div\r\n            className=\"card p-5 border-secondary\"\r\n            style={{ marginTop: \"10%\" }}\r\n          >\r\n            <div className=\"p-3\">\r\n              <h3 className=\"pb-4\">Login to EasyWeather</h3>\r\n              <div style={{ marginLeft: \"8%\" }}>\r\n                <h5>\r\n                  Don't have an account yet?\r\n                  <br />\r\n                </h5>\r\n                {/* link to move to registration page */}\r\n                <Link\r\n                  style={{ marginLeft: \"18%\" }}\r\n                  to=\"/register\"\r\n                  class=\"linkStyle\"\r\n                >\r\n                  Click here to Register\r\n                </Link>\r\n              </div>\r\n            </div>\r\n            {/* base form for handling user submits */}\r\n            <form noValidate onSubmit={this.onSubmit} className=\"mt-2\">\r\n              <div>\r\n                <input\r\n                  class=\"input\"\r\n                  placeholder=\"Email\"\r\n                  onChange={this.onChange}\r\n                  value={this.state.email}\r\n                  error={errors.email}\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                />\r\n                <br />\r\n                <span>\r\n                  {/* spans are used to display validation errors */}\r\n                  {errors.email} {errors.emailnotfound}\r\n                </span>\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <input\r\n                  class=\"input\"\r\n                  placeholder=\"Password\"\r\n                  onChange={this.onChange}\r\n                  value={this.state.password}\r\n                  error={errors.password}\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  className=\"textAlign: center\"\r\n                />\r\n                <br />\r\n                <span>\r\n                  {errors.password} {errors.passwordincorrect}\r\n                </span>\r\n              </div>\r\n              <button\r\n                className=\"btn btn-secondary mt-4\"\r\n                type=\"submit\"\r\n                style={{ marginLeft: \"41%\" }}\r\n              >\r\n                Login\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//define types with prop-types package, since we can't define in our constructor\r\nLogin.propTypes = {\r\n  loginUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n//map redux state to props to access it in our component\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n  errors: state.errors,\r\n});\r\n\r\n//connect our component to our redux store and export it\r\nexport default connect(mapStateToProps, { loginUser })(Login);\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => (\r\n  //renders a route and passes all props through to it\r\n  <Route\r\n    {...rest}\r\n    render={(props) =>\r\n      //checks if user is authenticated and renders component prop\r\n      auth.isAuthenticated === true ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        //otherwise redirect to login page\r\n        <Redirect to=\"/login\" />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\n//define types with prop-types package, since we can't define in our constructor\r\nPrivateRoute.propTypes = {\r\n  auth: PropTypes.object.isRequired,\r\n};\r\n\r\n//map redux state to props to access it in our component\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\n\r\n//connect our component to our redux store and export it\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { logoutUser } from \"../../../Authorization/Routes/routeDispatch\";\r\n\r\n//this is the navigation bar used for users who are logged in and authorized\r\nclass Navigation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userId: this.props.auth.user._id,\r\n      errors: {},\r\n    };\r\n  }\r\n  //allow user to logout from navbar, which will remove token from header and redirect to login page\r\n  onLogoutClick = (e) => {\r\n    e.preventDefault(); //stop default page redirect\r\n    this.props.logoutUser();\r\n  };\r\n\r\n  //navigation has two links: Home and Settings, and one button: Logout\r\n  render() {\r\n    //since we only need to access user information in one place, create constant to access it\r\n    const { user } = this.props.auth;\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar bg-dark\">\r\n          <Link to=\"/home\" className=\"btn btn-dark ml-4\">\r\n            Home\r\n          </Link>\r\n          <h4 style={{ marginLeft: \"10rem\" }}>\r\n            Hey {user.name.split(\" \")[0]}, welcome to EasyWeather!\r\n          </h4>\r\n          <div className=\"float-right\">\r\n            <Link to=\"/settings\" className=\"btn btn-dark ml-4 mr-4\">\r\n              Settings\r\n            </Link>\r\n            <button onClick={this.onLogoutClick} className=\"btn btn-dark mr-4\">\r\n              Logout\r\n            </button>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//define types with prop-types package, since we can't define in our constructor\r\nNavigation.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n//map redux state to props to access it in our component\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\n\r\n//connect our component to our redux store and export it\r\nexport default connect(mapStateToProps, { logoutUser })(Navigation);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { logoutUser } from \"../../../Authorization/Routes/routeDispatch\";\r\nimport API from \"../../../API/API_Keys\";\r\nimport DailyForecast from \"../../Others/DailyForecast\";\r\nimport Navigation from \"./Navigation\";\r\n\r\n//this is the home page showed to users who are logged in and authorized\r\n//i made seperate page, because I plan on expanding it/changing it to vary heavily from original home page for non logged in users\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: this.props.auth.user, //pass current authorized user to state\r\n      data: [],\r\n      dailyForecast: [],\r\n      city: \"\",\r\n      country: \"\",\r\n      units: \"\",\r\n      submittedCity: \"\",\r\n      submittedUnits: \"\",\r\n      invalidCity: false,\r\n    };\r\n    //bind changes to state\r\n    this.handleChangeCity = this.handleChangeCity.bind(this);\r\n    this.handleChangeUnits = this.handleChangeUnits.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //when mounting component, set intial state to our authorized user data\r\n    this.setState(\r\n      {\r\n        city: this.state.user.city,\r\n        submittedCity: this.state.user.city,\r\n        units: this.state.user.temperature,\r\n        submittedUnits: this.state.user.temperature,\r\n      },\r\n      //then fetch from API with our user data\r\n      () => {\r\n        this.searchForCityData();\r\n      }\r\n    );\r\n  }\r\n\r\n  //fetch city weather data from API\r\n  searchForCityData() {\r\n    const weatherURL = `http://api.openweathermap.org/data/2.5/forecast?q=${this.state.city}&units=${this.state.units}&appid=${API}`;\r\n    fetch(weatherURL)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        try {\r\n          //try filtering data to determine if the city is a valid city\r\n          let dailyData = data.list.filter((reading) =>\r\n            reading.dt_txt.includes(\"21:00:00\")\r\n          );\r\n          //set new state to filtered data if its a valid city\r\n          this.setState({\r\n            data: data,\r\n            dailyForecast: dailyData,\r\n            country: data.city.country,\r\n            invalidCity: false,\r\n          });\r\n        } catch {\r\n          //if data cannot be filtered, then it's invalid city, set state to reflect this\r\n          this.setState({\r\n            invalidCity: true,\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  //handle city changes\r\n  handleChangeCity(event) {\r\n    this.setState({\r\n      city: event.target.value,\r\n    });\r\n  }\r\n\r\n  //handle unit changes\r\n  handleChangeUnits(event) {\r\n    this.setState({ units: event.target.value });\r\n  }\r\n\r\n  //handle when user submits\r\n  handleSubmit(event) {\r\n    event.preventDefault(); //stop default page redirect\r\n    //change state to new data from user\r\n    this.setState(\r\n      {\r\n        city: this.state.city,\r\n        submittedCity: this.state.city,\r\n        units: this.state.units,\r\n        submittedUnits: this.state.units,\r\n      },\r\n      //fetch from api for new weather data\r\n      () => {\r\n        this.searchForCityData();\r\n      }\r\n    );\r\n  }\r\n\r\n  //capatlize first letter of city name if user inputs as small characters\r\n  //want to change to handle first letter of each word for cities with names that are more then one word\r\n  capatlizeCity(city) {\r\n    return city.charAt(0).toUpperCase() + city.slice(1);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* navigation bar for logged in users */}\r\n        <Navigation />\r\n        <div className=\"pb-5\">\r\n          <br />\r\n          <br />\r\n          <h1 style={center} className=\"p-5 text-light\">\r\n            EasyWeather\r\n          </h1>\r\n          <br />\r\n          <div style={center}>\r\n            {/* base form for handling user submits */}\r\n            <form onSubmit={this.handleSubmit}>\r\n              <input\r\n                value={this.state.city}\r\n                onChange={this.handleChangeCity}\r\n                type=\"text\"\r\n                className=\"p-2 m-4 rounded border-0\"\r\n                placeholder=\"Your city..\"\r\n              />\r\n              <select\r\n                value={this.state.units}\r\n                onChange={this.handleChangeUnits}\r\n                className=\"p-2 m-4 rounded border-0\"\r\n              >\r\n                <option value=\"metric\">Celcius</option>\r\n                <option value=\"imperial\">Fahrenheit</option>\r\n                <option value=\"kelvin\">Kelvin</option>\r\n              </select>\r\n              <input\r\n                className=\"btn btn-info ml-5 pl-3 pr-3\"\r\n                type=\"submit\"\r\n                value=\"Search\"\r\n              />\r\n              {/* if city is invalid, then show a message stating so */}\r\n              <p className=\"text-light\" style={center}>\r\n                {this.state.invalidCity === true\r\n                  ? \"Invalid city search.. please try again.\"\r\n                  : \"\"}\r\n              </p>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        {/* only show 5 day forecast text if city is valid */}\r\n        <div className=\"pt-2\">\r\n          <h2 style={center} className=\"text-light pb-4 pt-2\">\r\n            {this.state.submittedCity !== \"\" && this.state.invalidCity === false\r\n              ? \"5 Day Forecast\"\r\n              : \"\"}\r\n          </h2>\r\n          <h5\r\n            className=\"text-light pb-5\"\r\n            style={({ textTransform: \"capitalize\" }, center)}\r\n          >\r\n            {/* only show city information if city is valid and capatlize first letter of city */}\r\n            {this.state.invalidCity === false\r\n              ? this.capatlizeCity(this.state.submittedCity) +\r\n                \" \" +\r\n                this.state.country\r\n              : \"\"}\r\n          </h5>\r\n          <h5 className=\"justify-content-center row\">\r\n            {/* if city is valid then use DailyForecast component to map out the weather cards*/}\r\n            {this.state.invalidCity === false\r\n              ? this.state.dailyForecast.map((data, key) => (\r\n                  <DailyForecast\r\n                    key={key}\r\n                    data={data}\r\n                    tempUnit={this.state.submittedUnits}\r\n                  />\r\n                ))\r\n              : \"\"}\r\n          </h5>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//basic styling for centering various components\r\nconst center = {\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n};\r\n\r\n//define types with prop-types package, since we can't define in our constructor\r\nHome.propTypes = {\r\n  auth: PropTypes.object.isRequired,\r\n};\r\n\r\n//map redux state to props to access it in our component\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\n\r\n//connect our component to our redux store and export it\r\nexport default connect(mapStateToProps, { logoutUser })(Home);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { editUser } from \"./../../../Authorization/Routes/routeDispatch\";\r\nimport { deleteUser } from \"./../../../Authorization/Routes/routeDispatch\";\r\nimport Navigation from \"./Navigation\";\r\n\r\n//this is settings page for users who are currently logged in and authorized\r\n//currently you can only change your name, prefered city and prefered temperature units, with plans to expand to email/password\r\nclass Settings extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: this.props.auth.user.name,\r\n      city: this.props.auth.user.city,\r\n      temperature: this.props.auth.user.temperature,\r\n      errors: {},\r\n    };\r\n  }\r\n\r\n  //to recieve errors from server side validator if input fails validation test\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors,\r\n      });\r\n    }\r\n  }\r\n\r\n  //button to delete user\r\n  onDelete = (e) => {\r\n    e.preventDefault(); //stop default page redirect\r\n    const User = {\r\n      id: this.props.auth.user.id,\r\n    };\r\n    this.props.deleteUser(User);\r\n  };\r\n\r\n  //set state on input changed by user\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault(); //stop default page redirect\r\n    //create user object that contains the new settings data\r\n    const User = {\r\n      id: this.props.auth.user.id,\r\n      name: this.state.name,\r\n      email: this.props.auth.user.email,\r\n      city: this.state.city,\r\n      temperature: this.state.temperature,\r\n    };\r\n    //send new data to route dispatcher to be sent to backend and processed\r\n    this.props.editUser(User, this.props.history);\r\n  };\r\n\r\n  render() {\r\n    //constant to display error variables passed to the state to be displayed from backend validation\r\n    const { errors } = this.state;\r\n    return (\r\n      <div>\r\n        <Navigation />\r\n        <div className=\"col d-flex justify-content-center\">\r\n          <div\r\n            className=\"card p-5 border-secondary\"\r\n            style={{ marginTop: \"10%\" }}\r\n          >\r\n            <div className=\"p-3\">\r\n              <h3 className=\"pb-2\">Settings for EasyWeather</h3>\r\n              <div style={{ marginLeft: \"13%\" }}></div>\r\n              <h5 style={{ marginLeft: \"2.7rem\" }}>\r\n                Edit your settings below!\r\n                <br />\r\n              </h5>\r\n            </div>\r\n            {/* base form for handling user submits */}\r\n            <form noValidate onSubmit={this.onSubmit}>\r\n              <div>\r\n                <input\r\n                  placeholder=\"Name\"\r\n                  onChange={this.onChange}\r\n                  value={this.state.name}\r\n                  error={errors.name}\r\n                  id=\"name\"\r\n                  type=\"name\"\r\n                />\r\n                <br />\r\n                {/* spans are used to display validation errors */}\r\n                <span>{errors.name}</span>\r\n              </div>\r\n              <div>\r\n                <input\r\n                  placeholder=\"Preferred City\"\r\n                  onChange={this.onChange}\r\n                  value={this.state.city}\r\n                  error={errors.city}\r\n                  id=\"city\"\r\n                  type=\"city\"\r\n                />\r\n                <br />\r\n                <span>{errors.city}</span>\r\n              </div>\r\n              <div>\r\n                <select\r\n                  onChange={this.onChange}\r\n                  value={this.state.temperature}\r\n                  id=\"temperature\"\r\n                  className=\"textInput\"\r\n                >\r\n                  <option value=\"\">Preferred Temperature</option>\r\n                  <option value=\"metric\">Celcius</option>\r\n                  <option value=\"imperial\">Fahrenheit</option>\r\n                  <option value=\"kelvin\">Kelvin</option>\r\n                </select>\r\n                <br />\r\n                <span>{errors.temperature}</span>\r\n              </div>\r\n              <div>\r\n                <button\r\n                  className=\"btn btn-secondary mt-4\"\r\n                  type=\"submit\"\r\n                  style={{ marginLeft: \"29%\" }}\r\n                >\r\n                  Change Settings\r\n                </button>\r\n                <button\r\n                  onClick={this.onDelete}\r\n                  className=\"btn btn-dark mt-4\"\r\n                  style={{ marginLeft: \"30%\" }}\r\n                >\r\n                  Delete this User\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//define types with prop-types package, since we can't define in our constructor\r\nSettings.propTypes = {\r\n  deleteUser: PropTypes.func.isRequired,\r\n  editUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\n//map redux state to props to access it in our component\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n  errors: state.errors,\r\n});\r\n\r\n//connect our component to our redux store and export it\r\nexport default connect(mapStateToProps, { editUser, deleteUser })(Settings);\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport {\r\n  setCurrentUser,\r\n  logoutUser,\r\n} from \"./Authorization/Routes/routeDispatch\";\r\nimport setAuthToken from \"./Authorization/State/Others/setAuthToken\";\r\nimport store from \"./Authorization/State/Others/store\";\r\nimport HomeNotLoggedIn from \"./Components/Main/NotLoggedIn/Home\";\r\nimport Register from \"./Components/Main/NotLoggedIn/Register\";\r\nimport Login from \"./Components/Main/NotLoggedIn/Login\";\r\nimport PrivateRoute from \"./Components/Others/PrivateRoute\";\r\nimport Home from \"./Components/Main/LoggedIn/Home\";\r\nimport Settings from \"./Components/Main/LoggedIn/Settings\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      //provide used to pass the redux store data to the applicatiob\r\n      <Provider store={store}>\r\n        <Router>\r\n          <div className=\"App\">\r\n            <Route exact path=\"/\" component={HomeNotLoggedIn} />\r\n            <Route exact path=\"/register\" component={Register} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            {/* switch used for private routes that can only be accessed by a user who has logged in */}\r\n            <Switch>\r\n              <PrivateRoute exact path=\"/settings\" component={Settings} />\r\n              <PrivateRoute exact path=\"/home\" component={Home} />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\n//if there's a token currently stored in localStorage\r\nif (localStorage.jwtToken) {\r\n  //set that jwtToken to a token variable\r\n  const token = localStorage.jwtToken;\r\n  //send that token to be set to our header\r\n  setAuthToken(token);\r\n  //decode the payload data of the token and set to a variable\r\n  const decoded = jwt_decode(token);\r\n  //dispatch the token with our store, and set the current user to the decoded token\r\n  store.dispatch(setCurrentUser(decoded));\r\n  //check current time in seconds\r\n  const currentTime = Date.now() / 1000;\r\n  //compare the token expire time against the current time\r\n  if (decoded.exp < currentTime) {\r\n    //if the token is expred, logout the user and redirect them\r\n    store.dispatch(logoutUser());\r\n    window.location.href = \"./login\";\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}